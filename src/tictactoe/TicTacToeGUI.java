package tictactoe;

import java.awt.Component;
import java.io.IOException;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ASUS
 */
public class TicTacToeGUI extends javax.swing.JFrame {
    private TicTacToe game;
    /**
     * Creates new form TicTacToeGUI
     */
    public TicTacToeGUI() throws IOException {
        game = new TicTacToe();
        initComponents();
        for (Component c : this.getContentPane().getComponents()) {
            if (c instanceof JTextField) {
                JTextField field=(JTextField) c;
                field.setText("");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField8 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        cell11 = new javax.swing.JTextField();
        cell21 = new javax.swing.JTextField();
        cell12 = new javax.swing.JTextField();
        cell31 = new javax.swing.JTextField();
        cell32 = new javax.swing.JTextField();
        cell13 = new javax.swing.JTextField();
        cell23 = new javax.swing.JTextField();
        cell33 = new javax.swing.JTextField();
        cell22 = new javax.swing.JTextField();
        radioX = new javax.swing.JRadioButton();
        radioO = new javax.swing.JRadioButton();
        resultField = new javax.swing.JTextField();
        resetButton = new javax.swing.JButton();

        jTextField8.setText("jTextField2");

        jTextField10.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cell11.setEditable(false);
        cell11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cell11ActionPerformed(evt);
            }
        });

        cell21.setEditable(false);
        cell21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cell21ActionPerformed(evt);
            }
        });

        cell12.setEditable(false);
        cell12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cell12ActionPerformed(evt);
            }
        });

        cell31.setEditable(false);
        cell31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cell31ActionPerformed(evt);
            }
        });

        cell32.setEditable(false);
        cell32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cell32ActionPerformed(evt);
            }
        });

        cell13.setEditable(false);
        cell13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cell13ActionPerformed(evt);
            }
        });

        cell23.setEditable(false);
        cell23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cell23ActionPerformed(evt);
            }
        });

        cell33.setEditable(false);
        cell33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cell33ActionPerformed(evt);
            }
        });

        cell22.setEditable(false);
        cell22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cell22ActionPerformed(evt);
            }
        });

        radioX.setText("X");
        radioX.setSelected(true);
        radioX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioXActionPerformed(evt);
            }
        });

        radioO.setText("O");
        radioO.setSelected(false);
        radioO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioOActionPerformed(evt);
            }
        });

        resultField.setEditable(false);
        resultField.setEnabled(false);

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cell13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(radioX)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radioO)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cell23, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cell33, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(resultField)))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cell11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cell21, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cell12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cell22, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cell31, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cell32, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cell11)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cell21, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cell31, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cell32, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cell12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cell22, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cell13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cell23, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cell33, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioX)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(radioO)
                        .addComponent(resetButton)
                        .addComponent(resultField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cell13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cell13ActionPerformed
        if (cell13.getText().equals("")) {
            boolean userMoved=game.makeUserMove(1,3);
            if (!userMoved) {
                declareResult();
            }
            else {
                cell13.setText(game.getUserSymbol());
                Move machineMove=game.makeMachineMove();
                if (machineMove !=null) {
                    placeMachineMove(machineMove);
                }
                else {
                    declareResult();
                }
            }
        }
    }//GEN-LAST:event_cell13ActionPerformed

    private void radioXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioXActionPerformed

            radioO.setSelected(false);
            radioX.setSelected(true);
            game.changeSymbol("X");
    }//GEN-LAST:event_radioXActionPerformed

    private void radioOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioOActionPerformed

            radioX.setSelected(false);
            radioO.setSelected(true);
            game.changeSymbol("O");
    }//GEN-LAST:event_radioOActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        game.reset();
        for (Component c: this.getContentPane().getComponents()) {
            if (c instanceof JTextField) {
                JTextField field = (JTextField) c;
                field.setText("");
                field.setEnabled(true);
            }
        }
        resultField.setEnabled(false);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void cell11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cell11ActionPerformed
        if (cell11.getText().equals("")) {
            boolean userMoved=game.makeUserMove(1,1);
            if (!userMoved) {
                declareResult();
            }
            else {
                cell11.setText(game.getUserSymbol());
                Move machineMove=game.makeMachineMove();
                if (machineMove !=null) {
                    placeMachineMove(machineMove);  
                }
                else {
                    declareResult();
                }
            }
        }
    }//GEN-LAST:event_cell11ActionPerformed

    private void cell12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cell12ActionPerformed
        if (cell12.getText().equals("")) {
            boolean userMoved=game.makeUserMove(1,2);
            if (!userMoved) {
                declareResult();
            }
            else {
                cell12.setText(game.getUserSymbol());
                Move machineMove=game.makeMachineMove();
                if (machineMove !=null) {
                    placeMachineMove(machineMove);
                }
                else {
                    declareResult();
                }
            }
        }
    }//GEN-LAST:event_cell12ActionPerformed

    private void cell21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cell21ActionPerformed
        if (cell21.getText().equals("")) {
            boolean userMoved=game.makeUserMove(2,1);
            if (!userMoved) {
                declareResult();
            }
            else {
                cell21.setText(game.getUserSymbol());
                Move machineMove=game.makeMachineMove();
                if (machineMove !=null) {
                    placeMachineMove(machineMove);
                }
                else {
                    declareResult();
                }
            }
        }
    }//GEN-LAST:event_cell21ActionPerformed

    private void cell22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cell22ActionPerformed
        if (cell22.getText().equals("")) {
            boolean userMoved=game.makeUserMove(2,2);
            if (!userMoved) {
                declareResult();
            }
            else {
                cell22.setText(game.getUserSymbol());
                Move machineMove=game.makeMachineMove();
                if (machineMove !=null) {
                    placeMachineMove(machineMove);
                }
                else {
                    declareResult();
                }
            }
        }
    }//GEN-LAST:event_cell22ActionPerformed

    private void cell23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cell23ActionPerformed
        if (cell23.getText().equals("")) {
            boolean userMoved=game.makeUserMove(2,3);
            if (!userMoved) {
                declareResult();
            }
            else {
                cell23.setText(game.getUserSymbol());
                Move machineMove=game.makeMachineMove();
                if (machineMove !=null) {
                    placeMachineMove(machineMove);
                }
                else {
                    declareResult();
                }
            }
        }
    }//GEN-LAST:event_cell23ActionPerformed

    private void cell31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cell31ActionPerformed
        if (cell31.getText().equals("")) {
            boolean userMoved=game.makeUserMove(3,1);
            if (!userMoved) {
                declareResult();
            }
            else {
                cell31.setText(game.getUserSymbol());
                Move machineMove=game.makeMachineMove();
                if (machineMove !=null) {
                    placeMachineMove(machineMove);
                }
                else {
                    declareResult();
                }
            }
        }
    }//GEN-LAST:event_cell31ActionPerformed

    private void cell32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cell32ActionPerformed
        if (cell32.getText().equals("")) {
            boolean userMoved=game.makeUserMove(3,2);
            if (!userMoved) {
                declareResult();
            }
            else {
                cell32.setText(game.getUserSymbol());
                Move machineMove=game.makeMachineMove();
                if (machineMove !=null) {
                    placeMachineMove(machineMove);
                }
                else {
                    declareResult();
                }
            }
        }
    }//GEN-LAST:event_cell32ActionPerformed

    private void cell33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cell33ActionPerformed
        if (cell33.getText().equals("")) {
            boolean userMoved=game.makeUserMove(3,3);
            if (!userMoved) {
                declareResult();
            }
            else {
                cell33.setText(game.getUserSymbol());
                Move machineMove=game.makeMachineMove();
                if (machineMove !=null) {
                    placeMachineMove(machineMove);
                }
                else {
                    declareResult();
                }
            }
        }
    }//GEN-LAST:event_cell33ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TicTacToeGUI().setVisible(true);
                }
                catch(IOException e) {
                    System.out.println(e.toString());
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cell11;
    private javax.swing.JTextField cell12;
    private javax.swing.JTextField cell13;
    private javax.swing.JTextField cell21;
    private javax.swing.JTextField cell22;
    private javax.swing.JTextField cell23;
    private javax.swing.JTextField cell31;
    private javax.swing.JTextField cell32;
    private javax.swing.JTextField cell33;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JRadioButton radioO;
    private javax.swing.JRadioButton radioX;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField resultField;
    // End of variables declaration//GEN-END:variables
    
    private void declareResult() {
        resultField.setEnabled(true);
        if (game.getBoard().checkWinState()) {
            if (game.getLastSymbol().equals(game.getUserSymbol())) {
                resultField.setText("Player wins");
            }
            else {
                resultField.setText("Player loses");
            }
        }
        else {
            resultField.setText("Tie game");
        }
        for (Component c: this.getContentPane().getComponents()) {
            if (c instanceof JTextField) {
                JTextField field = (JTextField) c;
                field.setEnabled(false);
            }
        }
    }
    
    private void placeMachineMove(Move move) {
        int x=move.getX();
        int y=move.getY();
        String machineSymbol=game.getMachineSymbol();
        switch(x) {
            case 1:
                switch(y) {
                    case 1:
                        cell11.setText(machineSymbol);
                        break;
                    case 2:
                        cell12.setText(machineSymbol);
                        break;
                    case 3:
                        cell13.setText(machineSymbol);
                        break;
                }
                break;
            case 2:
                switch(y) {
                    case 1:
                        cell21.setText(machineSymbol);
                        break;
                    case 2:
                        cell22.setText(machineSymbol);
                        break;
                    case 3:
                        cell23.setText(machineSymbol);
                        break;
                }
                break;
            case 3:
                switch(y) {
                    case 1:
                        cell31.setText(machineSymbol);
                        break;
                    case 2:
                        cell32.setText(machineSymbol);
                        break;
                    case 3:
                        cell33.setText(machineSymbol);
                        break;
                }
                break;
            default:
                break;
        }
        if (game.getBoard().checkWinState() || game.getBoard().getAvailableMoves().isEmpty()) {
            declareResult();
        }
    }
}


